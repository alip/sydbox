#!/usr/bin/env bash
# vim: set sw=4 et sts=4 tw=80 :

# Check for bash
if test -z "${BASH_VERSION}"; then
    echo "This is not bash!"
    exit 127
fi

# Reset environment
export LANG=C
export LC_ALL=C
export TZ=UTC

unset CDPATH
unset PWD
unset SANDBOX_PHASE
unset SANDBOX_WRITE
unset SANDBOX_PREDICT
unset SANDBOX_NET
unset SANDBOX_CONFIG
unset SANDBOX_NO_COLOUR
unset SANDBOX_LOG

# Colour
if [[ "${TERM}" != "dumb" && -t 1 ]]; then
    tput bold >/dev/null 2>&1 &&
    tput setaf 1 >/dev/null 2>&1 &&
    tput sgr0 >/dev/null 2>&1 &&
    colour=true
else
    colour=false
fi

cwd="$(readlink -f .)"
long_dir=$(printf '%200s' ' ' | tr ' ' x)
toolong_dir="$(
    for ((i=1; i <= 64; i++)); do
        printf "$long_dir"
        [[ $i != 64 ]] && printf /
    done)"

SANDBOX_LOG="${cwd}/sydbox-$$.log"
remove_log=true

if [[ -z "${no_create_file}" ]]; then
    old_umask=$(umask)
    umask 022
    touch arnold.layne
    if [[ 0 != $? ]]; then
        die "touch arnold.layne"
    elif [[ ! -f arnold.layne ]]; then
        die "touch arnold.layne (no file)"
    fi
    umask $old_umask
fi

if [[ -z "${no_create_dir}" ]]; then
    old_umask=$(umask)
    umask 022
    mkdir see.emily.play
    if [[ 0 != $? ]]; then
        die "mkdir see.emily.play"
    elif [[ ! -d see.emily.play ]]; then
        die "mkdir see.emily.play (no dir)"
    fi
    umask $old_umask
fi

cleanup() {
    rm -fr arnold.layne >>"${SANDBOX_LOG}" 2>&1
    rm -f its.not.the.same >>"${SANDBOX_LOG}" 2>&1
    rm -f see.emily.play/gnome >>"${SANDBOX_LOG}" 2>&1
    rmdir see.emily.play >>"${SANDBOX_LOG}" 2>&1
    unlink jugband.blues >>"${SANDBOX_LOG}" 2>&1
    $remove_log && rm -f "${SANDBOX_LOG}" 2>&1
}
trap 'cleanup' EXIT

sydbox() {
    SANDBOX_NO_CONFIG=1 @TOP_BUILDDIR@/src/sydbox -0 4 -l "${SANDBOX_LOG}" "$@"
}

if [[ $colour ]]; then
    say() {
        case "$1" in
            error) tput bold; tput setaf 1;;  # bold red
            skip)  tput bold; tput setaf 2;;  # bold green
            pass)  tput setaf 2;;             # green
            info)  tput setaf 3;;             # brown
        esac
        shift
        printf "* %s" "$@"
        tput sgr0
        echo
    }
else
    say() {
        shift
        echo "* $@"
    }
fi

die() {
    say error "Reason: $@"
    say error "Log: ${SANDBOX_LOG}"
    echo ">>> Testcase failed: $@" >> "${SANDBOX_LOG}"
    remove_log=false
    exit 1
}

start_test() {
    say info "$@"
    echo ">>> Starting testcase $@" >> "${SANDBOX_LOG}"
}

end_test() {
    echo ">>> Finished testcase" >> "${SANDBOX_LOG}"
}

find_perl_or_skip() {
    local p="$(type -P perl 2>/dev/null)"
    if [[ -z "$p" ]]; then
        say skip "perl not found, skipping test"
        exit 0
    fi
    echo "$p"
}

mkstemp_long() {
    local old_umask perl tempfile template toolong_dir

    if [[ -z "$1" ]]; then
        template=tmp.XXXXXXXXXX
    else
        template="$1"
    fi

    # save & set umask
    old_umask=$(umask)
    umask 022

    # bash fails to do it so use perl instead...
    perl="$(find_perl_or_skip)"

    tempfile=$("$perl" \
        -e 'use File::Temp qw/ :mktemp  /;' \
        -e 'my $dir = '$long_dir';' \
        -e 'foreach my $i (1..64) {' \
        -e '    mkdir($dir, 0700) && chdir($dir) or die "$!" ' \
        -e '}' \
        -e '($fh, $file) = mkstemps("'$template'", "syd") or die "$!";' \
        -e 'close($fh);' \
        -e 'printf($file);')
    if [[ -z "$tempfile" ]]; then
        say skip "failed to create temporary file, skipping test"
        rm -fr $long_dir
        exit 0
    fi

    echo $tempfile
    umask $old_umask
}

