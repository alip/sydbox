#!/usr/bin/env bash
# vim: set sw=4 et sts=4 nowrap :
# Copyright 2009, 2010 Ali Polatel <alip@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

# Check for bash
if test -z "${BASH_VERSION}"; then
    echo "This is not bash!"
    exit 127
fi

# Reset environment
export LANG=C
export LC_ALL=C
export TZ=UTC

unset CDPATH
unset PWD
unset SYDBOX_WRITE
unset SYDBOX_EXEC_ALLOW
unset SYDBOX_EXEC
unset SYDBOX_NET
unset SYDBOX_CONFIG
unset SYDBOX_NO_COLOUR
unset SYDBOX_LOG
unset SYDBOX_LOCK
unset SYDBOX_WAIT_ALL

# Colour
if [[ "${TERM}" != "dumb" && -t 1 ]]; then
    tput bold >/dev/null 2>&1 &&
    tput setaf 1 >/dev/null 2>&1 &&
    tput sgr0 >/dev/null 2>&1 &&
    colour=true
else
    colour=false
fi

sydbox() {
    local vdir
    if [[ -n "$SYDBOX_RUN_UNDER_VALGRIND" ]]; then
        vdir="@TOP_BUILDDIR@/tests/valgrind"
        SYDBOX_VALGRIND="$vdir" SYDBOX_NO_CONFIG=1 \
            "$vdir"/valgrind.sh \
            @TOP_BUILDDIR@/src/sydbox -0 4 -l "$SYDBOX_LOG" "$@"
    else
        SYDBOX_NO_CONFIG=1 \
            @TOP_BUILDDIR@/src/sydbox -0 4 -l "$SYDBOX_LOG" "$@"
    fi
}

if $colour; then
    say() {
        case "$1" in
            error) tput bold; tput setaf 1;;  # bold red
            skip)  tput bold; tput setaf 2;;  # bold green
            pass)  tput setaf 2;;             # green
            info)  tput setaf 3;;             # brown
        esac
        shift
        printf "* %s" "$@"
        tput sgr0
        echo
    }
else
    say() {
        shift
        echo "* $@"
    }
fi

die() {
    say error "Reason: $@"
    say error "Log: ${SYDBOX_LOG}"
    echo ">>> Testcase failed: $@" >> "${SYDBOX_LOG}"
    remove_log=false
    exit 1
}

start_test() {
    say info "$@"
    echo ">>> Starting testcase $@" >> "${SYDBOX_LOG}"
}

end_test() {
    echo ">>> Finished testcase" >> "${SYDBOX_LOG}"
}

# Global variables
cwd="$(readlink -f .)"
long_dir=$(printf '%200s' ' ' | tr ' ' x)
toolong_dir="$(
    for ((i=1; i <= 64; i++)); do
        printf "$long_dir"
        [[ $i != 64 ]] && printf /
    done)"

SYDBOX_LOG="${cwd}/sydbox-$$.log"
remove_log=true

# Files created automatically by test-lib.bash:
# arnold.layne          (Normal file)
# see.emily.play/       (Directory)
# see.emily.play/gnome  (Normal file)
# its.not.the.same      (Symbolic link to see.emily.play/gnome)
#
# no_create_files environment variable can be set to prevent creation.
# If a test suite creates a file that has to be cleaned add it to the
# clean_files[] array.
clean_files=()
if [[ -z "$no_create_files" ]]; then
    # save & set umask
    old_umask=$(umask)
    umask 022

    if ! touch arnold.layne >>"${SYDBOX_LOG}" 2>&1; then
        die "touch arnold.layne"
    elif [[ ! -f arnold.layne ]]; then
        die "touch arnold.layne (no file)"
    else
        clean_files+=( "arnold.layne" )
    fi

    if ! mkdir see.emily.play >>"${SYDBOX_LOG}" 2>&1; then
        die "mkdir see.emily.play"
    elif [[ ! -d see.emily.play ]]; then
        die "mkdir see.emily.play (no file)"
    else
        clean_files+=( "see.emily.play" )
    fi

    if ! touch see.emily.play/gnome >>"${SYDBOX_LOG}" 2>&1; then
        die "touch see.emily.play/gnome"
    elif [[ ! -f see.emily.play/gnome ]]; then
        die "touch see.emily.play/gnome (no file)"
    else
        clean_files+=( "see.emily.play/gnome" )
    fi

    if ! ln -s see.emily.play/gnome its.not.the.same >>"${SYDBOX_LOG}" 2>&1; then
        die "ln -s see.emily.play/gnome its.not.the.same"
    elif [[ ! -h its.not.the.same ]]; then
        die "ln -s see.emily.play/gnome its.not.the.same (no symbolic link)"
    else
        clean_files+=( "its.not.the.same" )
    fi
fi

cleanup() {
    echo "Cleaning up:" >>"${SYDBOX_LOG}"
    echo "  rm -fr ${clean_files[@]}" >>"${SYDBOX_LOG}"
    rm -fr "${clean_files[@]}" >>${SYDBOX_LOG} 2>&1
    echo "  rm -fr LONG_DIR" >>"${SYDBOX_LOG}"
    kill_long >>"${SYDBOX_LOG}" 2>&1
    $remove_log && rm -f "${SYDBOX_LOG}" 2>&1
}
trap 'cleanup' INT TERM EXIT

kill_long() {
    local perl

    # rm may fail to do it so use perl instead...
    perl="@PERL_PATH@"
    [[ -z "$perl" ]] && return 0

    "$perl"                             \
        -e 'use File::Path;'            \
        -e 'my $dir = '$long_dir';'     \
        -e 'rmtree($dir) or die "$!";'
}

mkdir_long() {
    local perl

    # bash fails to do it so use perl instead...
    perl="@PERL_PATH@"
    if [[ -z "$perl" ]]; then
        say skip "perl not found, skipping test"
        exit 0
    fi

    if ! "$perl"                                                \
        -e 'my $dir = '$long_dir';'                             \
        -e 'foreach my $i (1..64) {'                            \
        -e '    mkdir($dir, 0700) && chdir($dir) or die "$!" '  \
        -e '}'
    then
        say skip "failed to create too long directory structure, skipping test"
        exit 0
    fi
}

lstat_long() {
    local perl ret

    # bash fails to do it so use perl instead
    local fname="$1"
    perl="@PERL_PATH@"
    if [[ -z "$perl" ]]; then
        say skip "perl not found, skipping test"
        exit 0
    fi

    "$perl"                                 \
        -e 'my $dir = '$long_dir';'         \
        -e 'foreach my $i (1..64) {'        \
        -e '    chdir($dir) or exit(127)'   \
        -e '}'                              \
        -e 'if (!lstat("'$fname'")) {'      \
        -e '    exit(1)'                    \
        -e '} else {'                       \
        -e '    exit(0)'                    \
        -e '}'
}

mkstemp_long() {
    local old_umask perl tempfile template

    if [[ -z "$1" ]]; then
        template=tmp.XXXXXXXXXX
    else
        template="$1"
    fi

    # save & set umask
    old_umask=$(umask)
    umask 022

    # bash fails to do it so use perl instead...
    perl="@PERL_PATH@"
    [[ -z "$perl" ]] && exit 0

    tempfile=$("$perl"                                                  \
        -e 'use File::Temp qw/ :mktemp  /;'                             \
        -e 'my $dir = '$long_dir';'                                     \
        -e 'foreach my $i (1..64) {'                                    \
        -e '    mkdir($dir, 0700) && chdir($dir) or die "$!" '          \
        -e '}'                                                          \
        -e '($fh, $file) = mkstemps("'$template'", "syd") or die "$!";' \
        -e 'close($fh);'                                                \
        -e 'printf($file);')

    echo $tempfile
    umask $old_umask
}

mkdtemp_long() {
    local perl template

    if [[ -z "$1" ]]; then
        template=tmp.XXXXXXXXXX
    else
        template="$1"
    fi

    # bash fails to do it so use perl instead...
    perl="@PERL_PATH@"
    if [[ -z "$perl" ]]; then
        say skip "perl not found, skipping test"
        exit 0
    fi

    if ! "$perl"                                                \
        -e 'use File::Temp qw/ :mktemp  /;'                     \
        -e 'my $dir = '$long_dir';'                             \
        -e 'foreach my $i (1..64) {'                            \
        -e '    mkdir($dir, 0700) && chdir($dir) or die "$!" '  \
        -e '}'                                                  \
        -e '$tmpdir = mkdtemp("'$template'") or die "$!";'      \
        -e 'printf($tmpdir);'
    then
        say skip "failed to create temporary directory, skipping test"
        exit 0
    fi
}

perm_long() {
    local fname perl

    # bash fails to do it so use perl instead...
    fname="$1"
    perl="@PERL_PATH@"
    if [[ -z "$perl" ]]; then
        say skip "perl not found, skipping test"
        exit 0
    fi

    "$perl" \
        -e "use Fcntl ':mode';"                             \
        -e 'my $dir = '$long_dir';'                         \
        -e 'foreach my $i (1..64) {'                        \
        -e '    chdir($dir) or die "$!"'                    \
        -e '}'                                              \
        -e '($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,' \
        -e '    $atime,$mtime,$ctime,$blksize,$blocks) = stat("'$tmpfile'") or die "$!";' \
        -e 'printf(S_IMODE($mode));'
}

read_long() {
    local fname perl

    # bash fails to do it so use perl instead...
    fname="$1"
    perl="@PERL_PATH@"
    if [[ -z "$perl" ]]; then
        say skip "perl not found, skipping test"
        exit 0
    fi

    if ! "$perl"                                        \
        -e 'my $dir = '$long_dir';'                     \
        -e 'my $data;'                                  \
        -e 'foreach my $i (1..64) {'                    \
        -e '    chdir($dir) or die "$!"'                \
        -e '}'                                          \
        -e 'open(TEMPFILE, "'$fname'") or die "$!";'    \
        -e 'while (0 != (read(TEMPFILE, $data, 1))) {'  \
        -e '    printf($data);'                         \
        -e '}'                                          \
        -e 'close(TEMPFILE);'
    then
        say skip "failed to read data, skipping test"
        exit 0
    fi
}

write_long() {
    local fname perl

    # bash fails to do it so use perl instead...
    fname="$1"
    shift
    perl="@PERL_PATH@"
    if [[ -z "$perl" ]]; then
        say skip "perl not found, skipping test"
        exit 0
    fi

    if ! "$perl"                                                \
        -e 'my $dir = '$long_dir';'                             \
        -e 'foreach my $i (1..64) {'                            \
        -e '    mkdir($dir, 0700) && chdir($dir) or die "$!"'   \
        -e '}'                                                  \
        -e 'open(TEMPFILE, ">'$fname'") or die "$!";'           \
        -e 'print TEMPFILE '$@';'                               \
        -e 'close(TEMPFILE);'
    then
        say skip "failed to write data, skipping test"
        exit 0
    fi
}

tcp_server() {
    local addr port perl

    addr="$1"
    port=$2
    fail="$3"

    perl="@PERL_PATH@"
    if [[ -z "$perl" ]]; then
        echo "Perl not found" > "$fail"
        exit 1
    fi

    if ! "$perl"                                        \
        -e 'require IO::Socket;'                        \
        -e 'my $sock = IO::Socket::INET->new(ReuseAddr => 1, Listen => 1, LocalHost => "'$addr'", LocalPort => '$port');' \
        -e '$sock or die "no socket :$!";'              \
        -e 'my($client, $buffer);'                      \
        -e 'while ($client = $sock->accept()) {'        \
        -e '    while (defined($buffer = <$client>)) {' \
        -e '        if ($buffer =~ /^QUIT$/) {'         \
        -e '            exit(0);'                       \
        -e '        }'                                  \
        -e '        close($client);'                    \
        -e '    }'                                      \
        -e '}'
    then
        : > "$fail"
        exit 1
    fi
}

unix_server() {
    local path perl

    path="$1"
    fail="$2"
    unlink "$path" 2>/dev/null

    perl="@PERL_PATH@"
    if [[ -z "$perl" ]]; then
        echo "Perl not found" > "$fail"
        exit 1
    fi

    if ! "$perl"                                        \
        -e 'require IO::Socket;'                        \
        -e 'my $sock = IO::Socket::UNIX->new(Timeout => 5, Listen => 1, Local => "'$path'");' \
        -e '$sock or die "no socket :$!";'              \
        -e 'my($client, $buffer);'                      \
        -e 'while ($client = $sock->accept()) {'        \
        -e '    while (defined($buffer = <$client>)) {' \
        -e '        if ($buffer =~ /^QUIT$/) {'         \
        -e '            exit(0);'                       \
        -e '        }'                                  \
        -e '        close($client);'                    \
        -e '    }'                                      \
        -e '}'
    then
        : > "$fail"
        exit 1
    fi
}

send_tcp_server() {
    local addr port msg perl

    addr="$1"
    port=$2
    msg="$3"
    perl="@PERL_PATH@"
    [[ -z "$perl" ]] && return 1

    "$perl" \
        -e 'require IO::Socket;'            \
        -e 'my $sock = IO::Socket::INET->new(PeerAddr => "'$addr'", PeerPort => '$port');' \
        -e '$sock or die "no socket :$!";'  \
        -e 'print $sock "'$msg'\n";'        \
        -e 'close($sock);'
}

send_unix_server() {
    local path msg perl

    path="$1"
    msg="$2"
    perl="@PERL_PATH@"
    [[ -z "$perl" ]] && return 1

    "$perl" \
        -e 'require IO::Socket;'            \
        -e 'my $sock = IO::Socket::UNIX->new(Peer => "'$path'");' \
        -e '$sock or die "no socket :$!";'  \
        -e 'print $sock "'$msg'\n";'        \
        -e 'close($sock);'
}
